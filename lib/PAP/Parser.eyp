# This is a grammar file for Parse::Eyapp
# To create a new version of Parser.pm in this directory, run this command:
#
#   eyapp -m PAP::Parser -v -C Parser.eyp
#
# Take a look in Parser.output if there are any warnings.
#
# For more information, look at the manual page for Parse::Eyapp
#

# TODO Warn if Parser.pm is stale because this files has been modified


# ########################################################################### #
#                                                                             #
# Token definitions                                                           #
#                                                                             #
# ########################################################################### #

%whites /([ \t]+)/
%token PAP_VERSION
%token YAML_SECTION
%token SAMPLE
%token COUNT

%%


# ########################################################################### #
#                                                                             #
# Grammar definitions                                                         #
#                                                                             #
# ########################################################################### #

input:      header body             { 
                                        shift;
                                        return { %{$_[0]}, %{$_[1]} };
                                    }
;

header:     PAP_VERSION.version     
            YAML_SECTION?.meta      {
                                        {
                                            version => $version,
                                            (ref $meta eq 'ARRAY' and ref $meta->[0] eq 'HASH') ? %{$meta->[0]} : ()
                                        }
                                     }
;

body:       count.count samples.samples { { count => $count, samples => $samples }}
    |       samples.samples count.count { { count => $count, samples => $samples }}
;

samples:    sample                      { shift; [@_] }
    |       sample samples              { shift; [$_[0], @{$_[1]}] }
;

sample:     SAMPLE.sample
            YAML_SECTION?.meta          { return {%$sample, ((ref $meta eq 'ARRAY' and ref $meta->[0] eq 'HASH') ? (%{$meta->[0]}) : ())} }
;

count:      COUNT.count                 { $count }
;

%%


# ########################################################################### #
#                                                                             #
# Main                                                                        #
#                                                                             #
# ########################################################################### #

use strict;
use warnings;
use Carp 'croak';
use YAML::Any 'Load';
our $VERSION = '0.01';


# Custom lexer ############################################################## #

__PACKAGE__->lexer(
    sub {
        my $parser = shift;
        
        for(${$parser->input}) {
            m{\G\s*(\#.*)?}gc;

            m{\Gpap\s+version\s+(\d+)\s*\R}igc and do {
                return 'PAP_VERSION', $1;
            };

            m{\G(?<=  )---\R(.+?\R)  ...\R}sgc and do {
                my $yaml = Load($1);
                return 'YAML_SECTION', $yaml
                    if ref $yaml eq 'HASH';
                croak 'YAML top level must be associative.';
            };

            m{\G(\w+):\s*((?i)\d+(?:\.\d+)?(?:e[-+]\d+)?)(?:\s*(\S+))?\R}gc and do {
                return 'SAMPLE', {
                    handle => $1,
                    value  => $2,
                    ($3 ? (unit   => $3) : ())
                };
            };

            m{\G1\.\.(\d+)\R}gc and do {
                return 'COUNT', $1;
            };
            
            return '', undef;
        }
    }
);


=head1 NAME

PAP::Parser - Profile Anything Protocol Parser

=head1 VERSION

Version 0.01

=head1 SYNOPSIS

This module provides a parser for Profile Anything Protocol.

    use PAP::Parser;

    my $parser = PAP::Parser->new();
    $parser->slurp_file("samples.pap");
    my $samples = $p->Run;

=head1 METHODS

=head2 C<input>

Set the PAP string to parse. The actual parsing is done using C<Run>.

=head2 C<slurp_file>

Read a PAP file to parse. The actual parsing is done using C<Run>.

=head2 C<Run>

Parse the data provided by a previous call to either C<input> or C<slurp_file>.

The methods described above are provided by L<Parse::Eyapp::Driver>. You may
be able to find some other useful methods described there.

=head1 FORMAT

The PAP format is intended to provide a human-readable as well as parsable
format for profiling data. The structure of a PAP file is:

  <HEADER>
  <SAMPLES>
  [<FOOTER>]

=head2 C<HEADER>

The C<HEADER> consists of:

  <VERSION LINE>
  [<YAML>]
  [<SAMPLE COUNT>]

The C<HEADER> must start with a C<VERSION LINE>, reading

  PAP Version 1

In addition to this, it is possible to embed additional data in the C<YAML>
section as YAML enclosed in lines with the chars C<"  ---"> and C<"  ...">.
The YAML data must be indented with exactly two spaces like so:

  PAP Version 1
    ---
    host: my.server.com
    testdate: 2011-01-01
    ...

The intent with the YAML section is to provide additional data that can be
used for subsequent statistics or classification, but the generator of the
file may insert any data it deems useful.

Finally, the number of samples in the file should be provided in the section
C<SAMPLE COUNT>. This section must be present - either here or at the very end
of the file. The C<SAMPLE COUNT> section follows this format:

  1..<NUMBER OF SAMPLES>

Where C<NUMBER OF SAMPLES> is the number of sample lines provided in the file.
It is an error to have no samples in a file, so you can't let C<SAMPLE COUNT>
be C<1..0>.

=head2 C<SAMPLES>

Measurements consists of one line with a measurement followed by an optional
YAML section with extra data relating to this sample. Each sample consists of:

  <HANDLE> ':' <NUMBER> [<UNIT>]

Where the C<HANDLE> must consist of alphanumeric chars, the number may be
either an integer (e.g. 424519), a decimal number (e.g. 31.938) or a floating
point number (e.g. 1.432e-5). The unit provided can be any sequence of non-
whitespace chars and is used for informational purposes only. (It is generally
good practice to tell what units you are using.)

An example of a sample with an additional YAML section:

  throughput: 1.87 mbps
    ---
    build: version-1.4
    hostname: bromine
    ...

There must be at least one sample in the C<SAMPLES> section.

=head2 C<FOOTER>

The C<FOOTER> section only contains a C<SAMPLE COUNT>:

  <SAMPLE COUNT>

This section is optional and must be provided if there is no C<SAMPLE COUNT>
in the C<HEADER> section.

=head2 Example

A small example with the sample count at the bottom:

  PAP Version 1
    ---
    database: hexen
    sample counts:
      - 10
      - 20
      - 40
      - 80
    ...
  table_scan: 14 seconds
    ---
    query: select * from bigtable
    start_time: 2011-01-01 14:23:38
    ...
  1..1

The above provides the following data structure:

  {
    count => 1,
    database => "hexen",
    "sample counts" => [10, 20, 40, 80],
    samples => [
          {
            handle     => "table_scan",
            query      => "select * from bigtable",
            start_time => "2011-01-01 14:23:38",
            unit       => "seconds",
            value      => 14,
          },
        ],
    version => 1,
  }


=head2 Caveats

The top level of any YAML section (either in the header or in
a sample) must be associative.

The parser can't currently be expected to complain about mismatch between the
C<SAMPLE COUNT> and the actual number of samples.

=head1 AUTHOR

"Michael Zedeler", C<michael at zedeler.dk>

=head1 BUGS

Please report any bugs or feature requests to C<michael at zedeler.dk>, or through
the issue tracker at L<http://github.com/mzedeler/PAP-Parser/>.

If you find a bug, I prefer if you write a test case, clone PAP-Parser from Github,
push your test and send a pull request along with the bug report.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc PAP::Parser


=head1 ACKNOWLEDGEMENTS

=head1 LICENSE AND COPYRIGHT

Copyright 2011 "Michael Zedeler".

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

1; # End of PAP::Parser
